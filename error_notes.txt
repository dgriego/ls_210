ReferenceError
===============
- occurs when you reference a variable or function that doesn't exist

TypeError
===============
var a;       // a is declared but is empty as it has not been set to a value.
typeof(a);   // 'undefined'

a.name;      // TypeError: Cannot read property 'name' of undefined

a = 1;
a();         // TypeError: Property 'a' is not a function

SyntaxError
===============
function ( {}                  // SyntaxError: Unexpected token (
JSON.parse('not really JSON'); // SyntaxError: Unexpected token i in JSON at position 0

RangeError
URIError


PreventingErrors
===============
using the
Guard Clause ->
guard clause is code that guarantees data meets
certain preconditions before it gets used

function lowerInitial(word) {
  if (word.length === 0) {          // If word contains an empty String,
    return '-';                     // return a dash instead of proceeding.
  }

  return word[0].toLowerCase();     // word is guaranteed to have at least
}                                   // 1 character, so word[0] never evaluates
                                    // as undefined.

When To Use Guard Clauses

Guard clauses are best used when a Function can't trust that its arguments are
valid. Invalid arguments can have incorrect types, structures, values,
or properties. Usually, though, your program should be able to trust itself
to do the right thing; you should be able to trust that it always calls its
methods with valid values. So, for example, if you can trust that your
program always calls lowerInitial with a non-empty String, you don't
need the guard clause.


Catching an Error
================
try {
  // Do something that might fail here and throw an Error.
} catch (error) {
  // This code only runs if something in the try clause throws an Error.
  // "error" contains the Error object.
} finally {
  // This code always runs, no matter if the above code throws an Error or not.
}

function parseJSON(data) {
  var result;

  try {
    result = JSON.parse(data);  // Throws an Error if "data" is invalid
  } catch (e) {
    // We run this code if JSON.parse throws an Error
    // "e" contains an Error object that we can inspect and use.
    console.log('There was a', e.name, 'parsing JSON data:', e.message);
    result = null;
  } finally {
    // This code runs whether `JSON.parse` succeeds or fails.
    console.log('Finished parsing data.');
  }

  return result;
}

var data = 'not valid JSON';

parseJSON(data);                // Logs "There was a SyntaxError parsing JSON data:
                                //       Unexpected token i in JSON at position 0"
                                // Logs "Finished parsing data."
                                // Returns null

When to Use Try/Catch
====================

Only use try/catch/finally blocks when the following conditions are both true:

- A built-in JavaScript Function or method can throw an Error and you need to handle or prevent that Error.
- A simple guard clause is impossible or impractical to prevent the Error.
